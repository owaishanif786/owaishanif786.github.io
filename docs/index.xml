<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elesscode</title>
    <link>https://www.elesscode.com/</link>
    <description>Recent content on elesscode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Aug 2022 08:13:22 +0500</lastBuildDate><atom:link href="https://www.elesscode.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ec2 Docker Lambda Fargate Eks Ecs Overview</title>
      <link>https://www.elesscode.com/posts/ec2-docker-lambda-fargate-eks-ecs-overview/</link>
      <pubDate>Fri, 05 Aug 2022 08:13:22 +0500</pubDate>
      
      <guid>https://www.elesscode.com/posts/ec2-docker-lambda-fargate-eks-ecs-overview/</guid>
      <description>This is an overview from the Moon about basic compute resources in aws and what technologies can help us to manage them.
EC2: Elastic Compute EC2 are the machines in the AWS cloud just like you create ubuntu,windows VMs in virtualbox or VM-ware. you can connect them via ssh or any RDP tools. EC2 have hourly billing model based on resources like RAM, CPU and network traffic.
why ec2: just like old days build an app.</description>
    </item>
    
    <item>
      <title>Kubernetes Basics</title>
      <link>https://www.elesscode.com/posts/kubernetes-basics/</link>
      <pubDate>Wed, 03 Aug 2022 21:40:14 +0500</pubDate>
      
      <guid>https://www.elesscode.com/posts/kubernetes-basics/</guid>
      <description>We will see basic information about kubernetes, architecture and its compoentes and Features
kubernetes Architecture Control plane have following 4 components: CASE
Controller Manager &amp;ndash; keeps tracks of whats happening i.e restarting API Server &amp;ndash; scripts, UI, API, CLI Scheduler &amp;ndash; ensures pods replacement. on which node pod to place etcd database &amp;ndash; kubernetes backing store Virtual Network creates one unified machine. its how master and child nodes communicate. Inside node each pod have its own ip.</description>
    </item>
    
    <item>
      <title>Dockerizing a Nodejs Express App</title>
      <link>https://www.elesscode.com/posts/dockerizing-a-nodejs-express-app/</link>
      <pubDate>Tue, 02 Aug 2022 07:50:07 +0500</pubDate>
      
      <guid>https://www.elesscode.com/posts/dockerizing-a-nodejs-express-app/</guid>
      <description>Dockerizing a node express app is simple.
step1: Create simple node app with express. package.json with with its dependencies. index.js with required code which will be creating and running server at port 8080. Our simple server code that returns hello world when we will hit http://x.x.x.x:8080/
//package.json { &amp;#34;name&amp;#34;: &amp;#34;node-express-app&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;, &amp;#34;scripts&amp;#34;: { &amp;#34;start&amp;#34;: &amp;#34;node index.js&amp;#34; }, &amp;#34;keywords&amp;#34;: [], &amp;#34;author&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34;, &amp;#34;dependencies&amp;#34;: { &amp;#34;express&amp;#34;: &amp;#34;^4.</description>
    </item>
    
    <item>
      <title>Setting up hugo blog with github pages and namecheap</title>
      <link>https://www.elesscode.com/posts/my-first-post/</link>
      <pubDate>Mon, 01 Aug 2022 09:14:39 +0500</pubDate>
      
      <guid>https://www.elesscode.com/posts/my-first-post/</guid>
      <description>This is first post on the blog where we will see how to we can setup our blog using hugo, github pages and namecheap avoiding any hosting costs.
At Hosting/Namecheap buy domain example.com from namecheap point example.com to www.example.com point www to username.github.io Add multiple A records which points to github IPs CNAME @ www.example.com CNAME www username.github.io A @ 185.199.108.153 A @ 185.199.109.153 A @ 185.199.110.153 A @ 185.199.111.153 On github side.</description>
    </item>
    
  </channel>
</rss>
